#+Title: A language for theoretical psychology
#+author: Britt Anderson
#+tags: mtmc

Psychology, across all its subdisciplines, has generated impressive amounts of data over the last century. However it has at the same time dropped its reason for being. Psychology was founded as the science of subjectivity aiming to apply scientific principles and procedures to the study of consciousness and mental states. The difficulty of this undertaking led to its abandonment and replacement by behaviorism where the blackbox was sealed and the science became about discovering connections between sensory inputs and behavioral outputs. A brief return towards psychology's original purpose was made by the cognitive psychologists in the 1950s and 1960s building upon the then new science of Shannon's information theory. After another 20 years this project was largely abandoned as mainstream and replaced again by behaviorism though this time the outputs included neural correlates as well as behaviors. The blackbox remained sealed. The new names, such as cognitive neuroscience, that were used to name this hybrid of behaviorism unintentionally shielded both consumers and practitioners from recognizing the departure from psychology's founding purpose. While many potential explanations for this evolution exist, I propose that it largely rests on the absence of a common grounding language. A language which permits comparisons across fields, subfields and disciplines. A language which makes it easy to express theories well and makes it difficult or impossible to express proto-theories and pseudo-theories at all. There is no other candidate for constructing this langugae other than formal mathematics, but even within mathematics there are many potential approaches that one could suggest. Whatever the precise nature of the mathematical language which will be elaborated shortly an important practical requirement is that mathematical language not simply be an internally consistent expression of an idea, but also provides a route to testing novel consequences against new data, making strong predictions of both a positive and negative nature. That is to both confirm predictions of the theories and to disconfirm results inconsistent with the theories via its mathematical expression. Human have a limited ability to follow for multiple steps a highly branched decision tree. This is the type of grunt work for which computers are well suited and so computer simulations need to be a component of this process. Thus another desiderata for our mathematical language is that provide a direct, transparent, auditable trail between math and code. Ideally the code would be seen as not merely a transcription into machine language of the mathematical statements, but would itself via the abstractions of the language deployed offer the opportunity for new insights into the explanatory value of the theory and framework. The mathematical language proposed is category theory with particular concentration on  a sub-area associated with monoidal category. Within monoidal categories is a notion of both serial and parallel processes. Various subtypes of monoidal categories show attractive matches to many of the contemporary proto-theories of cognition. In particular, the category of hypergraphs seems to offer great potential generic expression of grounding for all mental operations reasonably considered to be cogntive will have a formalization in the form of a hypergraph. Many computer languages have of various types have been overlooked for their possible utility in helping to better understand and develop models of mental operations. These constructs of human minds may well reflect by virtue of their shape and structure features of the structures of that thought of them. When we look at programming languages not as merely simple tools of implementation but as themselves candidates for comparison and research we may help to gain better and richer understanding in particular of the notion of functional languages deserves most consideration along with features of types, metaprogramming, lazy evaluation and dependent types and various types of types linear, refinement and 
