<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Mind→Theory→Math→Code</title>
        <link>https://brittAnderson.github.io</link>
        <description><![CDATA[Seeking a Language for Theoretical Psychology]]></description>
        <atom:link href="https://brittAnderson.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 25 Aug 2025 00:00:00 UT</lastBuildDate>
        <item>
    <title>Exercises for Learning Lean</title>
    <link>https://brittAnderson.github.io/posts/2025-08-25-learning-lean.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on August 25, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <h1 id="finding-good-learning-material-for-lean4-is-a-challenge">Finding good learning material for Lean4 is a challenge</h1>
<p>Lean4 is version 4 of the <a href="https://lean-lang.org/lean4/doc/whatIsLean.html">Lean programming language</a>. It is intended to
be both an interactive theorem prover and a language for practical
programming. It is well supported and the pace of development is rapid.
Thus, it can be hard to find tutorial material, and the material you
find may be out of date quickly.</p>
<p>I found that claude.ai seemed to have a reasonable grasp of current
introductory Lean and I asked it to write me a series of exercises,
beginning with the trivial, to practice the tactic approach to
interactive theorem proving. I liked the <a href="https://adam.math.hhu.de/#/">Natural Number Game</a> as a step
0, but then I wanted to move on to using Lean in a more idiomatic way so
that I could also learn the peripheral features necessary to use it
practically. In my case that is Emacs, you are more likely to be using
VS Code. In both cases you need to learn how to use the tool as well as
the language.</p>
<p>I suspect that claude.ai found some exercises somewhere and glued them
together for me. I am happy to give you credit if you recognize them,
but for the convenience of other beginners I link them here.</p>
<ol type="1">
<li><a href="../assets/lean_exercises_tactics_sorries.lean">Exercises</a></li>
<li><a href="../assets/lean_exercises_tactics_solutions.lean">Solutions</a></li>
</ol>
<p>I will also be posting a set of exercises on "Set" operations and
proofs shortly.</p>
<p>Note Bene: to use these you will probably want to set up a project and
have these files in a module. You can ignore a lot of the project
details as long as you can get your IDE to find the necessary imports
and to give you feedback on the proof as you replace the sorries.</p>
    </section>
</article>
]]></description>
    <pubDate>Mon, 25 Aug 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-08-25-learning-lean.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>
<item>
    <title>A language for theoretical psychology</title>
    <link>https://brittAnderson.github.io/posts/2025-07-22-lang-psychol.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on July 22, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <p>Psychology, across all its sub-disciplines, has generated impressive amounts of data over the last century. However it has at the same time dropped its reason for being.</p>
<p>Psychology was founded as the science of subjectivity aiming to apply scientific principles and procedures to the
study of consciousness and mental states. The difficulty of this undertaking led to its abandonment and replacement by behaviorism where the black-box was sealed and the science became about discovering connections between sensory inputs and behavioral outputs.</p>
<p>A brief return towards psychology's original purpose was made by the
cognitive psychologists in the 1950s and 1960s building upon
Shannon's information theory. After another 20 years this project was
largely replaced again by a new behaviorism where neural correlates were
interposed between stimuli and behavior. The black-box remained sealed. New names, such as
cognitive neuroscience, camouflaged the old approach</p>
<p>While many potential explanations for this evolution exist, I propose
that it largely rests on the absence of a common grounding language
for the expression of theoretical ideas in psychology. We need a language
which permits comparisons across subfields and that makes it easy to express theories well and difficult to express proto-theories and pseudo-theories.</p>
<p>Mathematics offers
many potential candidates. But particularly important is that this language make clear how to test predictions of the theories and how to disconfirm alternatives. As people have a limited capacity for logic and following a highly branched decision tree for multiple steps, computer simulations will be essential. Thus, another desiderata for our
mathematical language is that it provide a direct, transparent, auditable
trail between math and code.</p>
<p>Ideally the code would not be merely a means of translating math to machine code, but would itself offer abstractions that fostered new insights into the explanatory
value of the theory.</p>
<p>The mathematical language proposed
is category theory. In particular the language of monoidal categories. A monoidal category has
notions of both serial and parallel processing. The monoidal category
of corresponding to a hypergraph seems particularly suited to framing psychological theories in a consistent way.</p>
<p>The requisite computer language should aid human understanding; not just instruct the machine. The programming
language should not be merely an implementation detail, but in its own right aid understanding and insight. The functional languages deserve most consideration. The benefit of dependent types, meta-programming and lazy evaluation make Lean the best available option.</p>
    </section>
</article>
]]></description>
    <pubDate>Tue, 22 Jul 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-07-22-lang-psychol.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>
<item>
    <title>Can Programming Languages Tell Us How We Think?</title>
    <link>https://brittAnderson.github.io/posts/2025-07-14-programming-languages.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on July 14, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <h1 id="programming-language-features-that-cognitive-modelers-dont-seem-to-talk-about">Programming Language Features that Cognitive Modelers Don't Seem to Talk About</h1>
<p>Our cognition is structured. Our spoken languages follow rules, some of
which seem to be universal. Since the same minds that speak, and are
thus constrained, are the ones that designed our programming languages
can we infer anything about how our minds might work from the features
language designers discover and create? Could a recognition of the
relevance lead us to make better choices in the programming language we
choose to implement a cognitive model?</p>
<ol type="1">
<li><p>Are our minds lazy? Most of our programming languages use "eager"
evaluation, but some, e.g. Haskell, use "lazy" evaluation. For
example in Haskell I can create a lazy list.</p>
<div class="captioned-content">
<div class="caption">
<p>The list is infinite, but Haskell is lazy and only generates what is
necessary. Since I only asked for the first 11 elements, that is all
it computes. The rest is a sort of promise. Some refer to this as
<code>call-by-need</code> as opposed to <code>call-by-value</code>.</p>
</div>
<div class="sourceCode" id="aLazyList" data-results="value" data-exports="both"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="aLazyList-1"><a href="#aLazyList-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myil ::</span> [<span class="dt">Int</span>]</span>
<span id="aLazyList-2"><a href="#aLazyList-2" aria-hidden="true" tabindex="-1"></a>myil <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span>]</span>
<span id="aLazyList-3"><a href="#aLazyList-3" aria-hidden="true" tabindex="-1"></a><span class="fu">take</span> <span class="dv">11</span> myil</span></code></pre></div>
</div></li>
</ol>
<table>
<tbody>
<tr>
<td style="text-align: left;">1</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">6</td>
<td style="text-align: left;">7</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">9</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">11</td>
</tr>
</tbody>
</table>
<p>Maybe we can think of infinity without being able to count to it,
because infinity exists as a promise. We can describe how to get there
and that is good enough.</p>
<ol type="1">
<li><p>Do our thoughts have types? Programming languages have "types." A
value can be an interger or a floating point value. It can be a
character or a string. We can have lists of integers, and we for
some languages we can define our own potentially very exotic types.
This allows the infrastructure of our programming language, the
interpreters and compilers and such, to operate on our input. We can
use the types to determine what to do and even overload our
operators.</p>
<div class="captioned-content">
<div class="caption">
<p>The same operator <code class="verbatim">+</code> will add two numbers but
concatenate two strings. They <code>types</code> of the values let it know what
to do.</p>
</div>
<div class="sourceCode" id="Simple_Python_Types" data-results="output" data-exports="both"><pre class="sourceCode python"><code class="sourceCode python"><span id="Simple_Python_Types-1"><a href="#Simple_Python_Types-1" aria-hidden="true" tabindex="-1"></a>string1 <span class="op">=</span> <span class="st">&quot;hello &quot;</span></span>
<span id="Simple_Python_Types-2"><a href="#Simple_Python_Types-2" aria-hidden="true" tabindex="-1"></a>string2 <span class="op">=</span> <span class="st">&quot;world&quot;</span></span>
<span id="Simple_Python_Types-3"><a href="#Simple_Python_Types-3" aria-hidden="true" tabindex="-1"></a>num1 <span class="op">=</span> <span class="dv">1</span></span>
<span id="Simple_Python_Types-4"><a href="#Simple_Python_Types-4" aria-hidden="true" tabindex="-1"></a>num2 <span class="op">=</span> <span class="dv">2</span></span>
<span id="Simple_Python_Types-5"><a href="#Simple_Python_Types-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span> (num1 <span class="op">+</span> num2)</span>
<span id="Simple_Python_Types-6"><a href="#Simple_Python_Types-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span> (string1 <span class="op">+</span> string2)</span></code></pre></div>
</div>
<pre class="example"><code>3
hello world</code></pre>
<p>Does this notion of a "type" exist for our thoughts? At the neural
level spikes are on or off, but the same is true of all the little
bits in our computers. Still, the language can superimpose a type on
these 0/1 patterns. Does our mentalese do the same?</p></li>
<li><p>Are our types of thoughts static or dynamic?</p>
<div class="captioned-content">
<div class="caption">
<p>Our variable <code>a</code> is initially a character. Then it is defined to be
a number. The type of <code>a</code> is altered dynamically.</p>
</div>
<div class="sourceCode" id="Dynamic_Typing" data-exports="both" data-results="output"><pre class="sourceCode python"><code class="sourceCode python"><span id="Dynamic_Typing-1"><a href="#Dynamic_Typing-1" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="st">&quot;1&quot;</span></span>
<span id="Dynamic_Typing-2"><a href="#Dynamic_Typing-2" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">1</span></span>
<span id="Dynamic_Typing-3"><a href="#Dynamic_Typing-3" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> <span class="dv">2</span></span>
<span id="Dynamic_Typing-4"><a href="#Dynamic_Typing-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span> (a <span class="op">+</span> b)</span></code></pre></div>
</div>
<pre class="example"><code>3</code></pre>
<div class="captioned-content">
<div class="caption">
<p>Trying to force our previously defined integer to be a string
produces an error in Haskell.</p>
</div>
<div class="sourceCode" id="staticTyping" data-results="output" data-exports="both"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="staticTyping-1"><a href="#staticTyping-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>set <span class="op">-</span><span class="dt">Wall</span></span>
<span id="staticTyping-2"><a href="#staticTyping-2" aria-hidden="true" tabindex="-1"></a><span class="ot">x ::</span> <span class="dt">Int</span></span>
<span id="staticTyping-3"><a href="#staticTyping-3" aria-hidden="true" tabindex="-1"></a>x <span class="ot">=</span> <span class="dv">42</span></span>
<span id="staticTyping-4"><a href="#staticTyping-4" aria-hidden="true" tabindex="-1"></a>x <span class="ot">=</span> <span class="st">&quot;hello&quot;</span></span></code></pre></div>
</div>
<pre class="example"><code>&lt;interactive&gt;:4:1: error: [GHC-88464]
    Variable not in scope: x :: Int
&lt;interactive&gt;:6:1: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘x’ shadows the existing binding
      defined at &lt;interactive&gt;:5:1</code></pre>
<p>When you learn a fact is it fixed? Can paradoxes of thought be
brought to the level of static typing?</p></li>
<li><p>Are our minds interpreted, compiled or a life long image?
Interpreted languages read the code line by line and give a
simultaneous translation. Compiled languages digest an entire
program at once and output the machine code translation. Images are
"live" and execute and re-define on the fly. Python is typically
interpreted. Haskell compiled. Common Lisp is an image.</p>
<p>Anecdotes abound about problems being solved after a good night's
sleep. Is the replay of our dreams the compilation of our
experiences? Is the real time response to environmental events the
interpretation of input? Is the constant revision of our lived
experience best accomodated by the metaphor of the <a href="https://arxiv.org/abs/2110.08993">Lisp
Image</a>?</p></li>
<li><p>Do our minds engage in metaprogramming?</p>
<div class="captioned-content">
<div class="caption">
<p>In some programming languages you can write code that writes code.
This is best known for Common Lisp, but exists for other languages
too, e.g. Lean, Julia, and Template Haskell.</p>
</div>
<div class="sourceCode" id="metaprogramming" data-org-language="lisp" data-results="output"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="metaprogramming-1"><a href="#metaprogramming-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Define a simple conditional macro</span></span>
<span id="metaprogramming-2"><a href="#metaprogramming-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defmacro</span><span class="fu"> unless-zero </span>(<span class="kw">number</span> &amp;body body)</span>
<span id="metaprogramming-3"><a href="#metaprogramming-3" aria-hidden="true" tabindex="-1"></a>  `(<span class="kw">unless</span> (<span class="op">=</span> ,<span class="kw">number</span> <span class="dv">0</span>)</span>
<span id="metaprogramming-4"><a href="#metaprogramming-4" aria-hidden="true" tabindex="-1"></a>     ,@body))</span>
<span id="metaprogramming-5"><a href="#metaprogramming-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="metaprogramming-6"><a href="#metaprogramming-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; Test the macro</span></span>
<span id="metaprogramming-7"><a href="#metaprogramming-7" aria-hidden="true" tabindex="-1"></a>(unless-zero <span class="dv">5</span></span>
<span id="metaprogramming-8"><a href="#metaprogramming-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">format</span> <span class="kw">t</span> <span class="st">&quot;Number is not zero!~%&quot;</span>)</span>
<span id="metaprogramming-9"><a href="#metaprogramming-9" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">format</span> <span class="kw">t</span> <span class="st">&quot;Its square is: ~a~%&quot;</span> (<span class="op">*</span> <span class="dv">5</span> <span class="dv">5</span>)))</span>
<span id="metaprogramming-10"><a href="#metaprogramming-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="metaprogramming-11"><a href="#metaprogramming-11" aria-hidden="true" tabindex="-1"></a>(unless-zero <span class="dv">0</span></span>
<span id="metaprogramming-12"><a href="#metaprogramming-12" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">format</span> <span class="kw">t</span> <span class="st">&quot;You don&#39;t know nothing&quot;</span>))</span>
<span id="metaprogramming-13"><a href="#metaprogramming-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="metaprogramming-14"><a href="#metaprogramming-14" aria-hidden="true" tabindex="-1"></a>(unless-zero <span class="dv">1</span></span>
<span id="metaprogramming-15"><a href="#metaprogramming-15" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">format</span> <span class="kw">t</span> <span class="st">&quot;Number is one!~%&quot;</span>))</span></code></pre></div>
</div>
<pre class="example"><code>Number is not zero!
Its square is: 25
Number is one!</code></pre>
<p>We learn many things as we grow and age, and some of those things
are not simply re-definitions, but deep conceptual changes. How is
it we learn to learn? How can we reprogram ourselves? Is the concept
of the metaprogram one we need for any satisfactory account of
thinking?</p></li>
</ol>
<h1 id="in-summary">In summary,</h1>
<p>Maybe we should think more about what the designers of programming
languages have created when thinking about how to model the thinking
that we do. Maybe thinking about the features of the cognitive process
we are modelling will lead us to favor some programming language over
others as it permits a more natural application of our ideas to the
problem.</p>
    </section>
</article>
]]></description>
    <pubDate>Mon, 14 Jul 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-07-14-programming-languages.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>
<item>
    <title>Programming, Programming Languages and Cognitive Theorizing</title>
    <link>https://brittAnderson.github.io/posts/2025-06-18-computer-languages.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on June 18, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <p>Do the programming languages we know influence the cognitive theories
that we conceive? Does our view of programming's role in computational
cognitive science have a negative effect on our advancement?</p>
<p>A few interesting quotes from Edsger W. Dijkstra's ACM Turning Lecture
(1972) <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. For some I have a comment, for others there is nothing to
add.</p>
<blockquote>
<p>"[Two opinions from the early days]…The one opinion was that a
really competent programmer should be puzzle-minded and very fond of
clever tricks; the other opinion was that programming was nothing more
than optimizing the efficiency of the computational process, in one
direction or the other."</p>
</blockquote>
<p>I think the latter is the attitude opinion of most programmers in
computational neuroscience.</p>
<blockquote>
<p>"The sooner we can forget that FORTRAN has ever existed, the better,
for as a vehicle of thought it is no longer adequate: it wastes our
brainpower, is too risky and therefore too expensive to use. FORTRAN’s
tragic fate has been its wide acceptance, mentally chaining thousands
and thousands of programmers to our past mistakes."</p>
</blockquote>
<p>Replace FORTRAN with Python for the modern version. Don't miss the
little bit about programming "as a vehicle for thought." That is what
we most miss with our current popular languages.</p>
<blockquote>
<p>"… no loop should be written down without providing a proof for
termination …"</p>
</blockquote>
<p>Interesting to see him discussing formal methods 50 years ago.</p>
<blockquote>
<p>"We must not forget that it is not our business to make programs, it
is our business to design classes of computations that will display a
desired behaviour."</p>
</blockquote>
<p>Note the emphasis shift from program to computation.</p>
<blockquote>
<p>"The only effective way to raise the confidence level of a program
significantly is to give a convincing proof of its correctness. But
one should not first make the program and then prove its correctness,
because then the requirement of providing the proof would only
increase the poor programmer’s burden. On the contrary: the programmer
should let correctness proof and program grow hand in hand."</p>
</blockquote>
<p>Sounds like the desiderata for an interactive theorem prover. Did they
have them then?</p>
<blockquote>
<p>"In this connection it might be worth-while to point out that the
purpose of abstracting is not to be vague, but to create a new
semantic level in which one can be absolutely precise."</p>
</blockquote>
<blockquote>
<p>"Now for the fifth argument. It has to do with the influence of the
tool we are trying to use upon our own thinking habits. … if I start
to analyse the thinking habits of myself and of my fellow human
beings, I come, [I come to the conclusion] that the tools we are
trying to use and the language or notation we are using to express or
record our thoughts, are the major factors determining what we can
think or express at all!"</p>
</blockquote>
<p>This accords with my own impression. Knowing some Haskell, Common Lisp,
Python, and Lean (and probably many others) improves your thinking, but
maybe not your programs. Mine are certainly a mess.</p>
<blockquote>
<p>"The analysis of the influence that programming languages have on the
thinking habits of its users, and the recognition that, by now,
brainpower is by far our scarcest resource, they together give us a
new collection of yardsticks for comparing the relative merits of
various programming languages."</p>
</blockquote>
<blockquote>
<p>"… tomorrow’s programming languages … to a much greater extent
than hitherto they should invite us to reflect in the structure of
what we write down all abstractions needed to cope conceptually with
the complexity of what we are designing."</p>
</blockquote>
<h1 id="footnotes">Footnotes</h1>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I took these from
<a href="https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html" class="uri">https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html</a>
.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>
]]></description>
    <pubDate>Wed, 18 Jun 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-06-18-computer-languages.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>
<item>
    <title>The Problem of Theoretical Psychology</title>
    <link>https://brittAnderson.github.io/posts/2025-05-30-the-problem.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on May 30, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <p>Scientific psychology began as a science of the human mind: a subjective science to complement the objective sciences of physics and biology. It failed. It became satisfied with results instead of answers; measuring behaviors instead of thoughts.</p>
<p>One professional lifespan was enough to forget. Cognitive psychology again tried to model mind. It too failed. Technological progress yielded a neurobehaviorism: cognitive neuroscience; neural correlates substituted for mental causes.</p>
<p>What if the problem isn’t that the question is about minds and what a conscious person feels, but the language we use to express our ideas about answers?</p>
    </section>
</article>
]]></description>
    <pubDate>Fri, 30 May 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-05-30-the-problem.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>
<item>
    <title>Why</title>
    <link>https://brittAnderson.github.io/posts/2025-05-23-why.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on May 23, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <p>Why is it what it is that makes it feels like me? And: What is the what
that explains the why?</p>
    </section>
</article>
]]></description>
    <pubDate>Fri, 23 May 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-05-23-why.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>
<item>
    <title>We need a new language</title>
    <link>https://brittAnderson.github.io/posts/2025-05-22-language.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on May 22, 2025
        
            by Britt Anderson
        
    </section>
    <section>
        <blockquote>
<p>“I am designing a new language. I've reached the limits of
conventional languages, and now they frustrate my attempts to progress
further. They lack the power to express concepts that I need, and even
in their own domain, they're imprecise and unwieldy. They're hardly
fit for speech, let alone for thought.</p>
<p>“Existing linguistic theory is useless; I'll reevaluate basic logic to
determine the suitable atomic components for my language. This
language will support a dialect coexpressive with all of mathematics,
so that any equation I write will have a linguistic equivalent.” - Ted Chiang <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
</blockquote>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Ted Chiang, <em>Stories of Your Life and Others</em> (Tor, 2002).<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>
]]></description>
    <pubDate>Thu, 22 May 2025 00:00:00 UT</pubDate>
    <guid>https://brittAnderson.github.io/posts/2025-05-22-language.html</guid>
    <dc:creator>Britt Anderson</dc:creator>
</item>

    </channel>
</rss>
